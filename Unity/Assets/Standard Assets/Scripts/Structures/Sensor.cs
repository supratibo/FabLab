//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;
using System.Collections.Generic;
using AssemblyCSharpfirstpass;

		
public class Sensor{

	public static bool Active = true;

	private char sep = '=';

	public bool IsActive = true;

	public string Building = "";
	public string Floor = "";
	public string Place = "";
		public string SensorType = "";
		public string SensorName = "";

	public ObjSettingItem ObjParentItem;


	// DO stuff here
	public SensorAndFunction SensorDefault = new SensorAndFunction();


	public Vector3 SensorNormal   = Vector3.forward;
	public GameObject SensorObject = GameObject.CreatePrimitive(PrimitiveType.Sphere);
		public LinkedList<string> Functions = new LinkedList<string>();
	public int ID = -1;
	public string Name = "";
	public LinkedList<string> NameID = new LinkedList<string>();

	public string Command = "";

	// intern
	public string OBJ = "";
	public SensorScript SensorScript;


	public Sensor (){
		SensorObject.transform.localScale = 0.1f * Vector3.one;
		SensorObject.transform.localPosition = Vector3.zero;
		SensorObject.transform.localRotation = Quaternion.identity;
		SensorObject.SetActive(Sensor.Active);

	}

	public Sensor(Sensor s){
		Building = s.Building;
		Floor = s.Floor;
		Place = s.Place;

		SensorType = s.SensorType;
		SensorName = s.SensorName;
	
		SensorNormal   = s.SensorNormal;
		SensorObject = GameObject.CreatePrimitive(PrimitiveType.Sphere);
		SensorObject.transform.localScale = 0.1f * Vector3.one;
		SensorObject.transform.localRotation = Quaternion.identity;
		SensorObject.transform.localPosition = s.SensorObject.transform.localPosition;
		SensorObject.SetActive(Sensor.Active);
		
		Functions = new LinkedList<string>();
		
		ID = -1;
		
		Name = s.Name;
		NameID = s.NameID;
		
		
		
			OBJ = s.OBJ;

	}

	public Sensor(string s){
		SensorObject.transform.localScale = 0.1f * Vector3.one;
		SensorObject.transform.localPosition = Vector3.zero;
		SensorObject.transform.localRotation = Quaternion.identity;
		SensorObject.SetActive(Sensor.Active);



		Building = PString.ReadArg("Building",s);
		Floor = PString.ReadArg("Floor",s);
		Place = PString.ReadArg("Place",s);
		OBJ = PString.ReadArg("OBJ",s);
		SensorType = PString.ReadArg("SensorType",s);
		SensorName = PString.ReadArg("SensorName",s);
		ID = int.Parse(PString.ReadArg("ID",s));
		Name = PString.ReadArg("Name",s);
		NameID = PString.ReadArgs("NameID",s);



		if(OBJ != ""){
			foreach(GameObject g in MainAddSensor.objModel){
				if(OBJ == g.name){
					SensorObject.transform.parent = g.transform;
					g.transform.position = SensorObject.transform.localPosition;
					ObjSettingItem item = (ObjSettingItem) g.GetComponent(typeof(ObjSettingItem));
					ObjParentItem = item.Find(PString.ReadArg("Item",s));
					break;
				}
			}
		}

		SensorObject.transform.localPosition = new Vector3(float.Parse(PString.ReadArg("SensorPositionX",s)), float.Parse(PString.ReadArg("SensorPositionY",s)), float.Parse(PString.ReadArg("SensorPositionZ",s)));
		SensorNormal = new Vector3(float.Parse(PString.ReadArg("SensorNormalX",s)), float.Parse(PString.ReadArg("SensorNormalY",s)), float.Parse(PString.ReadArg("SensorNormalZ",s)));

	}

	public string toString(){
		try{
			string res =  
			PString.WriteArg("Type","Sensor") + 
			PString.WriteArg("Building", Building) +
			PString.WriteArg("Floor", Floor) +
			PString.WriteArg("Place", Place) +
			PString.WriteArg("OBJ", OBJ) +
			PString.WriteArg("SensorType", SensorType) +
			PString.WriteArg("SensorName", SensorName) + 
	
			PString.WriteArg("SensorPositionX", "" + SensorObject.transform.localPosition.x) +
			PString.WriteArg("SensorPositionY", "" + SensorObject.transform.localPosition.y) +
			PString.WriteArg("SensorPositionZ", "" + SensorObject.transform.localPosition.z) +
			PString.WriteArg("SensorNormalX", "" + SensorNormal.x) +
			PString.WriteArg("SensorNormalY", "" + SensorNormal.y) +
			PString.WriteArg("SensorNormalZ", "" + SensorNormal.z) +
	
			PString.WriteArg("ID", "" + ID) +
			PString.WriteArg("Name", Name) +
			PString.WriteArg("Item", ObjParentItem.Name);
			foreach(string str in NameID){
				res += PString.WriteArg("NameID", str);
			}

		return res;
		}
		catch{
			return "";
		}
	}

	public void UpdateValue (LinkedList<ParseXML> allSensorXML)
	{
		SensorScript.UpdateValue(allSensorXML);
	}

	public static string Export(LinkedList<Sensor> list){
		string st = "";
		foreach (Sensor s in StaticMemory.SensorList) {
			if (s.IsActive){
				st = st + s.toString() + "\n";
			}
		}
		return st;
	}

	public static LinkedList<Sensor> Import(string s){
		LinkedList<Sensor> res = new LinkedList<Sensor>();
		foreach(string sen in s.Split('\n')){
			if (sen == ""){
				continue;
			}
			res.AddLast(new Sensor (sen));
		}
		return res;
	}
}

