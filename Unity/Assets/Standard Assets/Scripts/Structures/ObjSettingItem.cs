//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;
using System.Collections.Generic;


namespace AssemblyCSharpfirstpass{

public class ObjSettingItem : MonoBehaviour{
		public int ID = -1;

		public string Name = "";

		public bool ExistingObj = false;
		public string NameInObjFile = "";

		public bool IsActive = true;
		public Color Color = Color.white;
		public bool ColorForce = false;
		
		public bool AutoColor = false;

		public LinkedList<ObjSettingItem> ListChild = new LinkedList<ObjSettingItem>();
		public ObjSettingItem Parent = null;
		public ObjSettingItem Root = null;

		public void Update(){
			if(AutoColor){
				Color = ColorPicker.TempColor;
				foreach (Material m in gameObject.GetComponent<Renderer>().materials){
					m.SetColor("_Color",Color);	
				}
			}
		}


		public void UpdateSettings(){
			gameObject.name = Name;
			try{
				gameObject.SetActive(IsActive);
				foreach (Material m in gameObject.GetComponent<Renderer>().materials){
					m.SetColor("_Color",Color);	
				}
			}
			catch{}
			foreach(ObjSettingItem it in ListChild){
				it.UpdateSettings();
			}
		}

		public void SetSettings(){
			foreach(ObjSettingItem it in ListChild){
				if(ColorForce)
					Color = Parent.Color;
				IsActive = Parent.IsActive;
				it.SetSettings();
			}
		}


		public string Export(string tab){
			string res = tab + 
				PString.WriteArg("Type","Item") + 
				PString.WriteArg("ID","" + ID) + 
				PString.WriteArg("Name",Name) + 
				PString.WriteArg("ExistingObj","" + ExistingObj) + 
				PString.WriteArg("NameInObjFile",NameInObjFile) + 
				PString.WriteArg("IsActive","" + IsActive) + 
				PString.WriteArg("ColorForce","" + "" + ColorForce) + 
				PString.WriteArg("ColorR","" + Color.r) + 
				PString.WriteArg("ColorG","" + Color.g) + 
				PString.WriteArg("ColorB","" + Color.b) + 
		
				"\n";
		
			foreach(ObjSettingItem child in ListChild){
				res += child.Export(tab + "\t");
			}
		
		
			return res + tab + PString.WriteArg("Type","End") + "\n";;
		
		}
		static string debug = "";




		public int Import(string[] s, int i, bool r){

			for (int id = i; id< s.Length; id++){
				if(PString.ReadArg("Type",s[id]) == "Item"){
					ID = int.Parse (PString.ReadArg("ID",s[id]));
					Name = PString.ReadArg("Name",s[id]);
					ExistingObj = bool.Parse (PString.ReadArg("ExistingObj",s[id]));
					NameInObjFile = PString.ReadArg("NameInObjFile",s[id]);
					IsActive = bool.Parse (PString.ReadArg("IsActive",s[id]));
					ColorForce = bool.Parse(PString.ReadArg("ColorForce",s[id]));
					Color = new Color(float.Parse (PString.ReadArg("ColorR",s[id])), float.Parse (PString.ReadArg("ColorG",s[id])), float.Parse (PString.ReadArg("ColorB",s[id])));

					id++;

					for (int id2 = id; id2 < s.Length; id2++){
						if(PString.ReadArg("Type",s[id2]) == "End"){
							return id2;
						}
						if(PString.ReadArg("Type",s[id2]) == "Item"){
							// create new
							bool Existing = bool.Parse (PString.ReadArg("ExistingObj",s[id2]));
							if(Existing){

								GameObject g  = GameObject.Find(PString.ReadArg("NameInObjFile",s[id2]));
								ObjSettingItem child = (ObjSettingItem) g.GetComponent(typeof(ObjSettingItem));
								child.Parent = this;
								child.Root = this.Root;
								id2 = child.Import(s,id2,false);
								ListChild.AddLast(child);


							}
							else{
								GameObject g = new GameObject();
								ObjSettingItem child = (ObjSettingItem) g.AddComponent(typeof(ObjSettingItem));
								child.Parent = this;
								id2 = child.Import(s,id2,false);
								ListChild.AddLast(child);

							}



						}
					}
					continue;
				}

			}
			return s.Length;
		}


		public ObjSettingItem Find(string s){
			if (s == Name){
				return this;
			}
			else{
				foreach( ObjSettingItem it in this.ListChild){
					ObjSettingItem res = it.Find (s);
					if( res != null){
						return res;
					}
				}
				return null;
			}

		}

	}
}