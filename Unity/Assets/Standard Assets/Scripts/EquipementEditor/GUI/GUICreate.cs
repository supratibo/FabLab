//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;
using System.Collections.Generic;


namespace AssemblyCSharpfirstpass
{

	public class GUICreate : MonoBehaviour{
		public Camera view ;
		public GameObject Device;
		public GameObject _Pivot;
		public GameObject _Camera;
		public SensorUpdator DeviceSensorUpdator;

		public SensorUpdator UpDate;
		private Vector3 MoussePreviousPosition = Vector3.zero;

		private GUIScrollAuto Scroll1 = new GUIScrollAuto();
		private GUIScrollAuto Scroll2 = new GUIScrollAuto();
		private GUIScrollAuto Scroll3 = new GUIScrollAuto();
		private bool showSensor = false;
		private bool showHelp = false;
		private bool dolink = false;

		private string NewFunction = "";

		
		public SensorUnityItem Root = new SensorUnityItem();
		public SensorUnityItem New  = new SensorUnityItem();
		public SensorUnityItem Current;


		public bool display = false;
		private bool EditKeys = false;
		private bool Tempo = false;

		void Start(){
			DeviceSensorUpdator =(SensorUpdator) Device.GetComponent(typeof(SensorUpdator));
			DeviceSensorUpdator.EditMode = true;


			Root = DeviceSensorUpdator.Import(System.IO.File.ReadAllLines(StaticMemory.LoadVirtualSensor));

			for (int i = 0; i < DisplayGUIScroll.Length; i++){
				DisplayGUIScroll[i] = new GUIScrollAuto();
			}


		}


		void Update(){
			StaticMemory._SizeX = Screen.width  - 2 * StaticMemory._Margin;
			StaticMemory._SizeY = Screen.height - 3 * StaticMemory._Margin - StaticMemory._Caption;

			float x = 2 * StaticMemory._Margin + StaticMemory._SizeX / 2;
			float y = 2 * StaticMemory._Margin;
			float lx = StaticMemory._SizeX / 2 - 2 * StaticMemory._Margin;
			float ly = StaticMemory._SizeY / 2 - 2 * StaticMemory._Margin;
			view.GetComponent<Camera>().rect = new Rect (x / Screen.width, y / Screen.height, lx / Screen.width, ly / Screen.height);

			if(Input.GetKeyUp(KeyCode.F5)){
				SensorUpdator SU = (SensorUpdator) Device.GetComponent(typeof(SensorUpdator));
				System.IO.File.WriteAllText(StaticMemory.SaveVirtualSensor,SU.Export());
			}


			if(Input.GetMouseButton(1)){
				rotationX = Input.GetAxis("Mouse X") * sensitivityX;
				rotationY = Input.GetAxis("Mouse Y") * sensitivityY;
				
				Quaternion xQuaternion = Quaternion.AngleAxis (rotationX, Vector3.up);
				Quaternion yQuaternion = Quaternion.AngleAxis (rotationY, -Vector3.right);
				
				Quaternion q = _Pivot.transform.localRotation * xQuaternion * yQuaternion;

				float qx = q.eulerAngles.x;
				float qy = q.eulerAngles.y;

				if(qx < 180){
					qx = Math.Min(80, qx);
				}
				else{
					qx = Math.Max(280, qx);
				}


				_Pivot.transform.localRotation = Quaternion.Euler(qx,qy,0);
			}
			if(Input.mousePosition.x >= StaticMemory._Margin + StaticMemory._SizeX/2 && Input.mousePosition.y <= StaticMemory._Margin + StaticMemory._SizeY/2){
				if(Input.GetAxis("Mouse ScrollWheel") < 0){
					_Camera.transform.localPosition = 1.1f * _Camera.transform.localPosition;
				}
				if(Input.GetAxis("Mouse ScrollWheel") > 0){
					_Camera.transform.localPosition = 0.9f * _Camera.transform.localPosition;
				}
			}



		}

		public float sensitivityX = 10F;
		public float sensitivityY = 10F;
		
		public float minimumX = -360F;
		public float maximumX = 360F;
		
		public float minimumY = -60F;
		public float maximumY = 60F;
		
		float rotationX = 0F;
		float rotationY = 0F;

		int[] DisplayGUI = {5,2,1,3,4,5};
		GUIScrollAuto[] DisplayGUIScroll = new GUIScrollAuto[6];
		int GUICount = 1;

		void OnGUI(){
			int currentY;
			int largeur;
			int size = 0;

			GUI.BeginGroup(new Rect (0,0,2* StaticMemory._Margin + StaticMemory._SizeX, 3 * StaticMemory._Margin + StaticMemory._SizeX));
			
			
			/////////////////////////////////////AFFICHAGE
			// Groupe : Caption
			GUI.BeginGroup (new Rect(StaticMemory._Margin,StaticMemory._Margin, StaticMemory._SizeX, StaticMemory._Caption));
			GUI.DrawTexture(new Rect(StaticMemory._SizeX - 3*StaticMemory._Caption,0, StaticMemory._Caption*3, StaticMemory._Caption), StaticMemory.A4HTexture, ScaleMode.StretchToFill, true, 0);
			GUI.Box(new Rect(0,0, StaticMemory._SizeX, StaticMemory._Caption), "");
			currentY = 0;
			largeur  = StaticMemory._SizeX - 2 * StaticMemory._Margin;
			
			if(GUI.Button(new Rect(StaticMemory._Margin, StaticMemory._Caption/2 - StaticMemory._hauteurChamp/2,  StaticMemory._hauteurChamp, StaticMemory._hauteurChamp), " < ") ||Input.GetKey(KeyCode.Escape)){
				Application.LoadLevel(0);
			}
			if(GUI.Button(new Rect(StaticMemory._Margin + StaticMemory._hauteurChamp, StaticMemory._Caption/2 - StaticMemory._hauteurChamp/2,  StaticMemory._hauteurChamp * 3, StaticMemory._hauteurChamp), " Save ") ||Input.GetKey(KeyCode.F1)){
				SensorUpdator SU = (SensorUpdator) Device.GetComponent(typeof(SensorUpdator));
				System.IO.File.WriteAllText(StaticMemory.SaveVirtualSensor,SU.Export());
				Application.LoadLevel(0);
			}
			GUI.Box(new Rect(StaticMemory._Margin + StaticMemory._SizeX/4,StaticMemory._Caption/2 - StaticMemory._hauteurChamp/2, largeur/2, StaticMemory._hauteurChamp),"Sensor display settings");
			GUI.EndGroup();
			
			// Groupe : Corps de la GUI
			GUI.BeginGroup (new Rect(StaticMemory._Margin,StaticMemory._Margin*2 + StaticMemory._Caption, StaticMemory._SizeX , StaticMemory._SizeY));

			if(GUI.Button(new Rect (largeur/2 - 2 * StaticMemory._hauteurChamp, currentY,StaticMemory._hauteurChamp,StaticMemory._hauteurChamp),"-")){
				GUICount--;	
			}
			if(GUI.Button(new Rect (largeur/2 - 1 * StaticMemory._hauteurChamp, currentY,StaticMemory._hauteurChamp,StaticMemory._hauteurChamp),"+")){
				GUICount++;	
			}

			GUICount = Math.Min(GUICount,DisplayGUI.Length-1);
			GUICount = Math.Max (GUICount,1);

			largeur  = StaticMemory._SizeX/2 - 2 * StaticMemory._Margin;


			GUI.BeginGroup (new Rect(StaticMemory._SizeX/2, StaticMemory._SizeY / 2, StaticMemory._SizeX/2 , StaticMemory._SizeY / 2));
			GUI.Box(new Rect(0,0, largeur + 2 * StaticMemory._Margin, StaticMemory._SizeY/2 ), "");
			GUI.EndGroup();

			for (int i = -1; i < GUICount; i++){
				if(i == -1){
					GUI.BeginGroup (new Rect(StaticMemory._SizeX/2, 0, StaticMemory._SizeX/2 , StaticMemory._SizeY / 2));
					GUI.Box(new Rect(0,0, largeur + 2 * StaticMemory._Margin, StaticMemory._SizeY/2 ), "");
				}
				else{
					GUI.BeginGroup (new Rect(0, i * StaticMemory._SizeY / GUICount, StaticMemory._SizeX , StaticMemory._SizeY / GUICount));
					GUI.Box(new Rect(0,0, largeur + 2 * StaticMemory._Margin, StaticMemory._SizeY/GUICount ), "");
				}

				currentY = 0;


				string[] tag = { "F","I","K","P","H"};
				for (int j = 0; j < tag.Length; j++){
					if(DisplayGUI[i+1] != 1+j && GUI.Button(new Rect (StaticMemory._Margin + j * StaticMemory._hauteurChamp, currentY,StaticMemory._hauteurChamp,StaticMemory._hauteurChamp),tag[j])){
						DisplayGUI[i+1] = 1+j;
					}
					if(DisplayGUI[i+1] == 1+j){
						GUI.skin.label.alignment = TextAnchor.MiddleCenter;
						GUI.Label(new Rect (StaticMemory._Margin + j * StaticMemory._hauteurChamp, currentY,StaticMemory._hauteurChamp,StaticMemory._hauteurChamp),tag[j]);
						GUI.skin.label.alignment = TextAnchor.UpperLeft;
					}
				}

				Rect title= new Rect(0, currentY, largeur + 2 * StaticMemory._Margin, StaticMemory._hauteurChamp);
				switch(DisplayGUI[i + 1]){
				case 1:
					GUI.Box(title, "Functions");
					break;
				case 2:
					GUI.Box(title, "Item selection");
					break;
				case 3:
					GUI.Box(title, "Keys edition");
					break;
				case 4:
					GUI.Box(title, "Parameters");
					break;
				case 5:
					GUI.Box(title, "Help");
					break;
				}
				currentY += StaticMemory._hauteurChamp;


				if(i == -1){
					try{
						DisplayGUIScroll[i+1].Begin(currentY,StaticMemory._SizeX/2,StaticMemory._SizeY/2);
					}
					catch{
						Scroll1.Begin(currentY,StaticMemory._SizeX/2,StaticMemory._SizeY/2);
					}
				}
				else{
					DisplayGUIScroll[i+1].Begin(currentY,StaticMemory._SizeX/2,StaticMemory._SizeY/GUICount);
				}


				switch(DisplayGUI[i + 1]){
				case 1:
					currentY = GUIFunction(currentY,largeur);
					break;
				case 2:
					currentY = GUIITemSelection(currentY,largeur);
					break;
				case 3:
					currentY = GUIKeyEdition(currentY,largeur);
					break;
				case 4:
					currentY = GUIParameters(currentY,largeur);
					break;
				case 5:
					currentY = GUIHelp(currentY,largeur);
					break;
				}
					try{
						DisplayGUIScroll[i+1].End(currentY);
				}
				catch{
					Scroll1.End(currentY);
					GUI.EndGroup();
					break;
				}
				GUI.EndGroup();
	
			}

			GUI.EndGroup();
			GUI.EndGroup();
				
				
		}
			

		int GUIFunction(int currentY, int largeur){
			foreach(SensorUnityFunction s in Root.ListFunction){
				string tab = "\t";
				if(s.Protected){
					tab += "[P]\t";
				}
				bool b = GUI.Toggle(new Rect(StaticMemory._Margin , currentY, largeur, StaticMemory._hauteurChamp), s == Root.CurrentFunction, tab + s.Name);
				if(b && (s != Root.CurrentFunction)){
					Root.CurrentFunction = s;
					Root.UpdateCurrentFunction(s.Name);
					
				}
				if(!s.Protected){
					currentY += StaticMemory._hauteurChamp;
					s.Condition.str = GUI.TextField(new Rect(StaticMemory._Margin , currentY, largeur, StaticMemory._hauteurChamp), s.Condition.str);
				}
				currentY += StaticMemory._hauteurChamp + StaticMemory._hauteurEntre;
				
			}
			
			GUI.Label(new Rect(StaticMemory._Margin , currentY, largeur - 2 * StaticMemory._hauteurChamp, StaticMemory._hauteurChamp), "New Function");
			currentY += StaticMemory._hauteurChamp;
			NewFunction = GUI.TextArea(new Rect(StaticMemory._Margin , currentY, largeur - 2 * StaticMemory._hauteurChamp, StaticMemory._hauteurChamp), NewFunction);
			
			if(NewFunction.Contains("\n") || ((NewFunction != "") && GUI.Button(new Rect (StaticMemory._Margin + largeur - 2 *StaticMemory._hauteurChamp, currentY, StaticMemory._hauteurChamp, StaticMemory._hauteurChamp), "+"))){
				Root.CurrentFunction = AddFunctionRec(Root,NewFunction.Split('\n')[0],false);
				NewFunction = "";
				Root.CurrentFunction.RotY.str = "[#Normale]";
			}
			currentY += StaticMemory._hauteurChamp + StaticMemory._hauteurEntre;
			return currentY;
		}

		int GUIITemSelection(int currentY, int largeur){
			int currentYmax = PrintList(Root,0,currentY,largeur/2,StaticMemory._hauteurChamp, true);

			New.Name = GUI.TextArea(new Rect(StaticMemory._Margin + largeur/2, currentY, largeur/2, StaticMemory._hauteurChamp), New.Name);
			currentY += StaticMemory._hauteurChamp + StaticMemory._hauteurEntre;
			
			if (GUI.Button(new Rect(StaticMemory._Margin + largeur/2, currentY, largeur/2, StaticMemory._hauteurChamp), "Duplicate Current")){
				try{
					New.Parent = Current.Parent;
					New.Name = New.Name.Split('\n')[0];
					New.Duplicate(Current, false);
					Current.Parent.ListChild.AddLast(New);
					
					
					
					Current = New;
					display = true;
					New = new SensorUnityItem();
				}
				catch{}
			}
			currentY += StaticMemory._hauteurChamp + StaticMemory._hauteurEntre;
			
			
			
			foreach (string s in SensorUnityItem.PrimitiveList){
				bool b = GUI.Toggle(new Rect(StaticMemory._Margin + largeur/2, currentY, largeur/2, StaticMemory._hauteurChamp),New.ObjectComponent == s,"\t" + s);
				if(b && New.ObjectComponent != s){
					New.ObjectComponent = s;
				}
				if(!b && New.ObjectComponent == s){
					New.ObjectComponent = SensorUnityItem.PrimitiveList[0];
				}
				currentY += StaticMemory._hauteurChamp;
			}
			
			
			if (GUI.Button(new Rect(StaticMemory._Margin + largeur/2, currentY, largeur/2, StaticMemory._hauteurChamp), "Add at Root")){
				New.Name = New.Name.Split('\n')[0];
				
				Root.ListChild.AddLast(New);
				New.Parent = Root;
				New.CreateComponent();
				
				foreach(SensorUnityFunction s in Root.ListFunction){
					SensorUnityFunction f = new SensorUnityFunction (s.Name,s.Protected);
					New.ListFunction.AddLast(f);
					if (s.Name == Root.CurrentFunction.Name){
						New.CurrentFunction = f;
					}
				}
				Current = New;
				display = true;
				
				New = new SensorUnityItem();
			}
			currentY += StaticMemory._hauteurChamp;
			if (GUI.Button(new Rect(StaticMemory._Margin + largeur/2, currentY, largeur/2, StaticMemory._hauteurChamp), "Add as Child") || New.Name.Contains("\n")){
				New.Name = New.Name.Split('\n')[0];
				if(Current != null){
					Current.ListChild.AddLast(New);
					New.Parent = Current;
				}
				else{
					Root.ListChild.AddLast(New);
					New.Parent = Root;
				}
				New.CreateComponent();
				
				foreach(SensorUnityFunction s in Root.ListFunction){
					SensorUnityFunction f = new SensorUnityFunction (s.Name,s.Protected);
					New.ListFunction.AddLast(f);
					if (s.Name == Root.CurrentFunction.Name){
						New.CurrentFunction = f;
					}
				}
				
				Current = New;
				display = true;
				New = new SensorUnityItem();
			}
			currentY += StaticMemory._hauteurChamp;
			if (GUI.Button(new Rect(StaticMemory._Margin + largeur/2, currentY, largeur/2, StaticMemory._hauteurChamp), "Add at same level")){
				New.Name = New.Name.Split('\n')[0];
				try{
					Current.Parent.ListChild.AddLast(New);
					New.Parent = Current.Parent;
					New.CreateComponent();
					
					foreach(SensorUnityFunction s in Current.ListFunction){
						SensorUnityFunction f = new SensorUnityFunction (s.Name,s.Protected);
						New.ListFunction.AddLast(f);
						if (s.Name == Root.CurrentFunction.Name){
							New.CurrentFunction = f;
						}
					}
					Current = New;
					display = true;
					New = new SensorUnityItem();
				}
				catch{}
			}
			
			currentY += StaticMemory._hauteurEntre +  StaticMemory._hauteurChamp;

			return Math.Max(currentYmax,currentY);

		}

		int GUIKeyEdition(int currentY, int largeur){
			LinkedList<SensorUpdator.KeyValue> TempList = new LinkedList<SensorUpdator.KeyValue> ();
			foreach(SensorUpdator.KeyValue k in DeviceSensorUpdator.KeyValuesMakeList){
				SensorUpdator.KeyValue k2 = new SensorUpdator.KeyValue(k.Key,k.Value); 
				if(k2.Key == "DELETED"){
					continue;
				}
				k2.Key = "[" + GUI.TextField(new Rect(StaticMemory._Margin + 0*largeur/4, currentY, 1*largeur/4 - 0*StaticMemory._hauteurChamp, StaticMemory._hauteurChamp), k2.Key.Replace("[","").Replace("]",""))+ "]";
				k2.Value = GUI.TextField(new Rect(StaticMemory._Margin + 1*largeur/4, currentY, 3*largeur/4 - 1*StaticMemory._hauteurChamp, StaticMemory._hauteurChamp), k2.Value);
				if(GUI.Button(new Rect(StaticMemory._Margin + largeur - StaticMemory._hauteurChamp, currentY, StaticMemory._hauteurChamp, StaticMemory._hauteurChamp), "x")){
					k2.Key = "DELETED";
				}
				currentY += StaticMemory._hauteurChamp;
				
				TempList.AddLast(k2);
			}
			DeviceSensorUpdator.KeyValuesMakeList.Clear();
			foreach(SensorUpdator.KeyValue k in TempList){
				DeviceSensorUpdator.KeyValuesMakeList.AddLast(k);
			}
			
			currentY += StaticMemory._hauteurEntre;
			
			
			LinkedList<SensorUpdator.KeyValue> TempListRoot = new LinkedList<SensorUpdator.KeyValue> ();
			foreach(SensorUpdator.KeyValue k in DeviceSensorUpdator.KeyValuesRootList){
				SensorUpdator.KeyValue k2 = new SensorUpdator.KeyValue(k.Key,k.Value); 
				if(k2.Key == "DELETED"){
					continue;
				}
				string[] val = k2.Value.Split('{')[1].Split('}')[0].Split(';');
				
				
				k2.Key = "[" + GUI.TextField(new Rect(StaticMemory._Margin, currentY, largeur - StaticMemory._hauteurChamp, StaticMemory._hauteurChamp), k2.Key.Replace("[","").Replace("]",""))+ "]";
				if(GUI.Button(new Rect(StaticMemory._Margin + largeur - StaticMemory._hauteurChamp, currentY, StaticMemory._hauteurChamp, StaticMemory._hauteurChamp), "x")){
					k2.Key = "DELETED";
				}
				currentY += StaticMemory._hauteurChamp;
				currentY += StaticMemory._hauteurEntre;
				k2.Id = GUI.TextField(new Rect(StaticMemory._Margin + 2*largeur/5, currentY, largeur/5, StaticMemory._hauteurChamp),k.Id);
				
				
				bool DoAddLine = false;
				bool DoDelLine = false;
				bool DoAddColumn = false;
				bool DoDelColumn = false;
				int index = 0;
				
				if(!Tempo && GUI.Button(new Rect(StaticMemory._Margin + 0*largeur/5, currentY, largeur/5, StaticMemory._hauteurChamp), "Del Line")){
					DoDelLine = true;
					index = int.Parse(k2.Id);
				}
				if(!Tempo && GUI.Button(new Rect(StaticMemory._Margin + 1*largeur/5, currentY, largeur/5, StaticMemory._hauteurChamp), "Add Line")){
					DoAddLine = true;
					index = int.Parse(k2.Id);
				}
				
				if(!Tempo && GUI.Button(new Rect(StaticMemory._Margin + 3*largeur/5, currentY, largeur/5, StaticMemory._hauteurChamp), "Add Column")){
					DoAddColumn = true;
					index = int.Parse(k2.Id);
				}
				if(!Tempo && GUI.Button(new Rect(StaticMemory._Margin + 4*largeur/5, currentY, largeur/5, StaticMemory._hauteurChamp), "Del Column")){
					DoDelColumn = true;
					index = int.Parse(k2.Id);
				}
				Tempo = DoAddLine || DoDelLine || DoAddColumn || DoDelColumn;
				
				currentY += StaticMemory._hauteurChamp;
				k2.Value = "{";
				
				int max = 0;
				for(int i = 0; i<val.Length; i++){
					max = Math.Max(max,val[i].Split(',').Length);
				}
				string newline = "";
				for (int t = 0; t< max -1; t++){
					newline += ",";
				}
				
				int l = Math.Min(max, 8);
				
				
				k2.Scale = GUI.BeginScrollView(
					new Rect(0,currentY, largeur + StaticMemory._Margin*2,StaticMemory._hauteurChamp*(val.Length+2)),
					k.Scale, 
					new Rect(0,currentY, 30 + (max)* (largeur- 30) / l + StaticMemory._Margin*2 -17,StaticMemory._hauteurChamp*(val.Length+2-17)),
					false, false
					);
				
				
				for (int i = 0; i<max;i++){
					GUI.Label(new Rect(StaticMemory._Margin  + 30 + (i)* (largeur- 30) / l,
					                   currentY,
					                   (largeur- 30) / l,
					                   StaticMemory._hauteurChamp), "   " + i);
					
					
				}
				currentY += StaticMemory._hauteurChamp;
				
				
				for(int i = 0; i<val.Length; i++){
					string[] subVal = val[i].Split(',');
					
					
					
					if(DoDelLine){
						if(index == i){
							continue;
						}
					}
					
					if(DoAddLine){
						if((i == index) && (i == 0)){
							k2.Value += newline + ";";
						}
					}
					
					if( i != 0){
						if(!(i == 1 && index == 0 && DoDelLine)){
							k2.Value += ";";
						}
					}
					GUI.Label(new Rect(StaticMemory._Margin ,
					                   currentY,
					                   30,
					                   StaticMemory._hauteurChamp),"" + i);
					for(int j = 0;  j<subVal.Length; j++){
						
						if(DoDelColumn){
							if(index == j){
								continue;
							}
						}
						
						if(DoAddColumn){
							if(j == 0 && index == 0){
								k2.Value += ",";
							}
						}
						
						subVal[j] = GUI.TextField(new Rect(StaticMemory._Margin  + 30 + (j)* (largeur- 30) / l,
						                                   currentY,
						                                   (largeur- 30) / l,
						                                   StaticMemory._hauteurChamp), subVal[j]).Replace(";","").Replace(",","").Replace("}","").Replace("{","");
						
						if(DoDelColumn){
							if(j == 1 && index == 0){
								k2.Value += subVal[j];
								continue;
							}
							
						}
						
						if(j != 0){
							k2.Value += "," + subVal[j];
						}
						else{
							k2.Value += subVal[j];
						}
						
						if(DoAddColumn){
							if(index == j+1){
								k2.Value += ",";
							}
						}
						
						
					}
					if(DoDelLine){
						if((i == 1 && index == 0) || (index == i)){
							continue;
						}
					}
					
					if(DoAddLine){
						if(i+1 == index){
							k2.Value += ";" + newline;
						}
					}
					
					currentY += StaticMemory._hauteurChamp;
					
				}
				GUI.EndScrollView();
				currentY += StaticMemory._hauteurChamp;
				
				k2.Value += "}";
				TempListRoot.AddLast(k2);
				
				currentY += StaticMemory._hauteurEntre;
				currentY += StaticMemory._hauteurEntre;
				
				
			}
			DeviceSensorUpdator.KeyValuesRootList.Clear();
			foreach(SensorUpdator.KeyValue k in TempListRoot){
				DeviceSensorUpdator.KeyValuesRootList.AddLast(k);
			}
			
			if(GUI.Button(new Rect(StaticMemory._Margin , currentY, largeur/2, StaticMemory._hauteurChamp), "Add New Item")){
				DeviceSensorUpdator.KeyValuesMakeList.AddLast(new SensorUpdator.KeyValue ("#",""));
			}
			
			
			if(GUI.Button(new Rect(StaticMemory._Margin + largeur/2, currentY, largeur/2, StaticMemory._hauteurChamp), "Add New Array")){
				DeviceSensorUpdator.KeyValuesRootList.AddLast(new SensorUpdator.KeyValue ("##","{}"));
			}
			
			currentY += StaticMemory._hauteurChamp + StaticMemory._hauteurEntre;

			return currentY;
		}

		int GUIParameters(int currentY, int largeur){
			if (Current == null){
				return currentY;
			}


			// Set Position.
			int[] posX =  {
				StaticMemory._Margin,
				StaticMemory._Margin + 2*StaticMemory._hauteurChamp,
				StaticMemory._Margin + largeur - 4*StaticMemory._hauteurChamp,
				StaticMemory._Margin + largeur - 3*StaticMemory._hauteurChamp
			};
			
			int[] sizeX = {
				2*StaticMemory._hauteurChamp,
				largeur - 6*StaticMemory._hauteurChamp,
				StaticMemory._hauteurChamp,
				StaticMemory._hauteurChamp
			};

			GUI.Label(new Rect(StaticMemory._Margin, currentY, 4*StaticMemory._hauteurChamp, StaticMemory._hauteurChamp), "Name:");
			Current.Name = GUI.TextField(new Rect(StaticMemory._Margin + 4*StaticMemory._hauteurChamp, currentY, largeur- 6*StaticMemory._hauteurChamp, StaticMemory._hauteurChamp), "" + Current.Name);
			currentY += StaticMemory._hauteurChamp + StaticMemory._hauteurEntre;
			
			
			GUI.Box(new Rect(StaticMemory._Margin, currentY, largeur , StaticMemory._hauteurChamp), "Active");
			currentY += StaticMemory._hauteurChamp;
			GUI.Label(new Rect(StaticMemory._Margin, currentY, 4*StaticMemory._hauteurChamp, StaticMemory._hauteurChamp), "Active cpnt:");
			Current.CurrentFunction.Active.str = GUI.TextField(new Rect(StaticMemory._Margin + 4*StaticMemory._hauteurChamp, currentY, largeur- 6*StaticMemory._hauteurChamp, StaticMemory._hauteurChamp), "" + Current.CurrentFunction.Active.str);

			try{
				GUI.enabled = Current.GObject.activeSelf;
				MeshRenderer m = Current.GObject.GetComponent<MeshRenderer>();
				currentY += StaticMemory._hauteurChamp;
				GUI.Label(new Rect(StaticMemory._Margin, currentY, 4*StaticMemory._hauteurChamp, StaticMemory._hauteurChamp), "Display cpnt:");
				Current.CurrentFunction.DisplayComponent.str = (GUI.TextField(new Rect(StaticMemory._Margin + 4*StaticMemory._hauteurChamp, currentY, largeur- 6*StaticMemory._hauteurChamp, StaticMemory._hauteurChamp), "" + Current.CurrentFunction.DisplayComponent.str));
				currentY += StaticMemory._hauteurChamp + StaticMemory._hauteurEntre;

				GUI.enabled = true;
			}
			catch{
				currentY += StaticMemory._hauteurEntre;
			}

			if(Current != Root){
				GUI.Box(new Rect(StaticMemory._Margin, currentY, largeur , StaticMemory._hauteurChamp), "Set Position (Y up)");
				currentY += StaticMemory._hauteurChamp;
				
				GUI.Label(new Rect(posX[0], currentY, sizeX[0], StaticMemory._hauteurChamp), "x:");
				Current.CurrentFunction.PosX.str = (GUI.TextField(new Rect(posX[1], currentY, sizeX[1], StaticMemory._hauteurChamp), "" + Current.CurrentFunction.PosX.str));
				
				try{ 	float.Parse(Current.CurrentFunction.PosX.str); }
				catch{	GUI.enabled = false; }
				if(GUI.Button(new Rect(posX[2], currentY, sizeX[2], StaticMemory._hauteurChamp), "-")){
					Current.CurrentFunction.PosX.str = "" + (float.Parse(Current.CurrentFunction.PosX.str) - 1f);
				}
				if(GUI.Button(new Rect(posX[3], currentY, sizeX[3], StaticMemory._hauteurChamp), "+")){
					Current.CurrentFunction.PosX.str = "" + (float.Parse(Current.CurrentFunction.PosX.str) + 1f);
				}
				GUI.enabled = true;
				currentY += StaticMemory._hauteurChamp;
				
				GUI.Label(new Rect(posX[0], currentY, sizeX[0], StaticMemory._hauteurChamp), "y:");
				Current.CurrentFunction.PosY.str = (GUI.TextField(new Rect(posX[1], currentY, sizeX[1], StaticMemory._hauteurChamp), "" + Current.CurrentFunction.PosY.str));
				
				try{ 	float.Parse(Current.CurrentFunction.PosY.str); }
				catch{	GUI.enabled = false; }
				if(GUI.Button(new Rect(posX[2], currentY, sizeX[2], StaticMemory._hauteurChamp), "-")){
					Current.CurrentFunction.PosY.str = "" + (float.Parse(Current.CurrentFunction.PosY.str) - 1f);
				}
				if(GUI.Button(new Rect(posX[3], currentY, sizeX[3], StaticMemory._hauteurChamp), "+")){
					Current.CurrentFunction.PosY.str = "" + (float.Parse(Current.CurrentFunction.PosY.str) + 1f);
				}
				GUI.enabled = true;
				currentY += StaticMemory._hauteurChamp;
				
				GUI.Label(new Rect(posX[0], currentY, sizeX[0], StaticMemory._hauteurChamp), "z:");
				Current.CurrentFunction.PosZ.str = (GUI.TextField(new Rect(posX[1], currentY, sizeX[1], StaticMemory._hauteurChamp), "" + Current.CurrentFunction.PosZ.str));
				
				try{ 	float.Parse(Current.CurrentFunction.PosZ.str); }
				catch{	GUI.enabled = false; }
				if(GUI.Button(new Rect(posX[2], currentY, sizeX[2], StaticMemory._hauteurChamp), "-")){
					Current.CurrentFunction.PosZ.str = "" + (float.Parse(Current.CurrentFunction.PosZ.str) - 1f);
				}
				if(GUI.Button(new Rect(posX[3], currentY, sizeX[3], StaticMemory._hauteurChamp), "+")){
					Current.CurrentFunction.PosZ.str = "" + (float.Parse(Current.CurrentFunction.PosZ.str) + 1f);
				}
				GUI.enabled = true;
				currentY += StaticMemory._hauteurChamp + StaticMemory._hauteurEntre;
				
				
				// Set Rotation
				GUI.Box(new Rect(StaticMemory._Margin, currentY, largeur , StaticMemory._hauteurChamp), "Set Rotation");
				currentY += StaticMemory._hauteurChamp;
				
				GUI.Label(new Rect(posX[0], currentY, sizeX[0], StaticMemory._hauteurChamp), "x:");
				Current.CurrentFunction.RotX.str = (GUI.TextField(new Rect(posX[1], currentY, sizeX[1], StaticMemory._hauteurChamp), "" + Current.CurrentFunction.RotX.str));
				
				try{ 	float.Parse(Current.CurrentFunction.RotX.str); }
				catch{	GUI.enabled = false; }
				if(GUI.Button(new Rect(posX[2], currentY, sizeX[2], StaticMemory._hauteurChamp), "-")){
					Current.CurrentFunction.RotX.str = "" + (float.Parse(Current.CurrentFunction.RotX.str) - 45f);
				}
				if(GUI.Button(new Rect(posX[3], currentY, sizeX[3], StaticMemory._hauteurChamp), "+")){
					Current.CurrentFunction.RotX.str = "" + (float.Parse(Current.CurrentFunction.RotX.str) + 45f);
				}
				GUI.enabled = true;
				currentY += StaticMemory._hauteurChamp;
				
				GUI.Label(new Rect(posX[0], currentY, sizeX[0], StaticMemory._hauteurChamp), "y:");
				Current.CurrentFunction.RotY.str = (GUI.TextField(new Rect(posX[1], currentY, sizeX[1], StaticMemory._hauteurChamp), "" + Current.CurrentFunction.RotY.str));
				
				try{ 	float.Parse(Current.CurrentFunction.RotY.str); }
				catch{	GUI.enabled = false; }
				if(GUI.Button(new Rect(posX[2], currentY, sizeX[2], StaticMemory._hauteurChamp), "-")){
					Current.CurrentFunction.RotY.str = "" + (float.Parse(Current.CurrentFunction.RotY.str) - 45f);
				}
				if(GUI.Button(new Rect(posX[3], currentY, sizeX[3], StaticMemory._hauteurChamp), "+")){
					Current.CurrentFunction.RotY.str = "" + (float.Parse(Current.CurrentFunction.RotY.str) + 45f);
				}
				GUI.enabled = true;
				currentY += StaticMemory._hauteurChamp;
				
				GUI.Label(new Rect(posX[0], currentY, sizeX[0], StaticMemory._hauteurChamp), "z:");
				Current.CurrentFunction.RotZ.str = (GUI.TextField(new Rect(posX[1], currentY, sizeX[1], StaticMemory._hauteurChamp), "" + Current.CurrentFunction.RotZ.str));
				
				try{ 	float.Parse(Current.CurrentFunction.RotZ.str); }
				catch{	GUI.enabled = false; }
				if(GUI.Button(new Rect(posX[2], currentY, sizeX[2], StaticMemory._hauteurChamp), "-")){
					Current.CurrentFunction.RotZ.str = float.Parse(Current.CurrentFunction.RotZ.str) - 45f + "\n";
				}
				if(GUI.Button(new Rect(posX[3], currentY, sizeX[3], StaticMemory._hauteurChamp), "+")){
					Current.CurrentFunction.RotZ.str = float.Parse(Current.CurrentFunction.RotZ.str) + 45f + "\n";
				}
				GUI.enabled = true;
				currentY += StaticMemory._hauteurChamp + StaticMemory._hauteurEntre;
				
				
				
				// Set Scale
				GUI.Box(new Rect(StaticMemory._Margin, currentY, largeur , StaticMemory._hauteurChamp), "Set Scale");
				currentY += StaticMemory._hauteurChamp;
				
				GUI.Label(new Rect(posX[0], currentY, sizeX[0], StaticMemory._hauteurChamp), "x:");
				Current.CurrentFunction.SclX.str = (GUI.TextField(new Rect(posX[1], currentY, sizeX[1], StaticMemory._hauteurChamp), "" + Current.CurrentFunction.SclX.str));
				
				try{ 	float.Parse(Current.CurrentFunction.SclX.str); }
				catch{	GUI.enabled = false; }
				if(GUI.Button(new Rect(posX[2], currentY, sizeX[2], StaticMemory._hauteurChamp), "-")){
					Current.CurrentFunction.SclX.str = "" + (float.Parse(Current.CurrentFunction.SclX.str) * 0.9f);
				}
				if(GUI.Button(new Rect(posX[3], currentY, sizeX[3], StaticMemory._hauteurChamp), "+")){
					Current.CurrentFunction.SclX.str = "" + (float.Parse(Current.CurrentFunction.SclX.str) * 1.1f);
				}
				GUI.enabled = true;
				currentY += StaticMemory._hauteurChamp;
				
				GUI.Label(new Rect(posX[0], currentY, sizeX[0], StaticMemory._hauteurChamp), "y:");
				Current.CurrentFunction.SclY.str = (GUI.TextField(new Rect(posX[1], currentY, sizeX[1], StaticMemory._hauteurChamp), "" + Current.CurrentFunction.SclY.str));
				
				try{ 	float.Parse(Current.CurrentFunction.SclY.str); }
				catch{	GUI.enabled = false; }
				if(GUI.Button(new Rect(posX[2], currentY, sizeX[2], StaticMemory._hauteurChamp), "-")){
					Current.CurrentFunction.SclY.str = "" + (float.Parse(Current.CurrentFunction.SclY.str) * 0.9f);
				}
				if(GUI.Button(new Rect(posX[3], currentY, sizeX[3], StaticMemory._hauteurChamp), "+")){
					Current.CurrentFunction.SclY.str = "" + (float.Parse(Current.CurrentFunction.SclY.str) * 1.1f);
				}
				GUI.enabled = true;
				currentY += StaticMemory._hauteurChamp;
				
				GUI.Label(new Rect(posX[0], currentY, sizeX[0], StaticMemory._hauteurChamp), "z:");
				Current.CurrentFunction.SclZ.str = (GUI.TextField(new Rect(posX[1], currentY, sizeX[1], StaticMemory._hauteurChamp), "" + Current.CurrentFunction.SclZ.str));
				
				try{ 	float.Parse(Current.CurrentFunction.SclZ.str); }
				catch{	GUI.enabled = false; }
				if(GUI.Button(new Rect(posX[2], currentY, sizeX[2], StaticMemory._hauteurChamp), "-")){
					Current.CurrentFunction.SclZ.str = float.Parse(Current.CurrentFunction.SclZ.str) * 0.9f + "\n";
				}
				if(GUI.Button(new Rect(posX[3], currentY, sizeX[3], StaticMemory._hauteurChamp), "+")){
					Current.CurrentFunction.SclZ.str = float.Parse(Current.CurrentFunction.SclZ.str) * 1.1f + "\n";
				}
				GUI.enabled = true;
				
				currentY += StaticMemory._hauteurChamp + StaticMemory._hauteurEntre;



				
			}
			
			
			try{
				Color c = Current.GObject.GetComponent<Renderer>().material.color;
				GUI.Box(new Rect(StaticMemory._Margin, currentY, largeur , StaticMemory._hauteurChamp), "Set Color");
				currentY += StaticMemory._hauteurChamp;
				GUI.Label(new Rect(StaticMemory._Margin , currentY, 2*StaticMemory._hauteurChamp, StaticMemory._hauteurChamp), "red:");
				Current.CurrentFunction.colorR.str = (GUI.TextField(new Rect(StaticMemory._Margin + 2*StaticMemory._hauteurChamp, currentY, largeur- 4*StaticMemory._hauteurChamp, StaticMemory._hauteurChamp), "" + Current.CurrentFunction.colorR.str));

				
				currentY += StaticMemory._hauteurChamp;
				GUI.Label(new Rect(StaticMemory._Margin, currentY, 2*StaticMemory._hauteurChamp, StaticMemory._hauteurChamp), "green:");
				Current.CurrentFunction.colorG.str = (GUI.TextField(new Rect(StaticMemory._Margin + 2*StaticMemory._hauteurChamp, currentY, largeur- 4*StaticMemory._hauteurChamp, StaticMemory._hauteurChamp), "" + Current.CurrentFunction.colorG.str));
				
				currentY += StaticMemory._hauteurChamp;
				GUI.Label(new Rect(StaticMemory._Margin, currentY, 2*StaticMemory._hauteurChamp, StaticMemory._hauteurChamp), "blue:");
				Current.CurrentFunction.colorB.str = (GUI.TextField(new Rect(StaticMemory._Margin + 2*StaticMemory._hauteurChamp, currentY, largeur- 4*StaticMemory._hauteurChamp, StaticMemory._hauteurChamp), "" + Current.CurrentFunction.colorB.str));
				
				
				
				currentY += StaticMemory._hauteurChamp + StaticMemory._hauteurEntre;
				
				
			}
			catch{}
			
			if(Current.ObjectComponent.Contains("Light")){
				//Color c = Current.GObject.light.color;
				GUI.Box(new Rect(StaticMemory._Margin, currentY, largeur , StaticMemory._hauteurChamp), "Light Color and Angle");
				currentY += StaticMemory._hauteurChamp;
				GUI.Label(new Rect(StaticMemory._Margin , currentY, 2*StaticMemory._hauteurChamp, StaticMemory._hauteurChamp), "red:");
				Current.CurrentFunction.colorR.str = (GUI.TextField(new Rect(StaticMemory._Margin + 2*StaticMemory._hauteurChamp, currentY, largeur- 4*StaticMemory._hauteurChamp, StaticMemory._hauteurChamp), "" + Current.CurrentFunction.colorR.str));
				
				
				currentY += StaticMemory._hauteurChamp;
				GUI.Label(new Rect(StaticMemory._Margin, currentY, 2*StaticMemory._hauteurChamp, StaticMemory._hauteurChamp), "green:");
				Current.CurrentFunction.colorG.str = (GUI.TextField(new Rect(StaticMemory._Margin + 2*StaticMemory._hauteurChamp, currentY, largeur- 4*StaticMemory._hauteurChamp, StaticMemory._hauteurChamp), "" + Current.CurrentFunction.colorG.str));
				
				currentY += StaticMemory._hauteurChamp;
				GUI.Label(new Rect(StaticMemory._Margin, currentY, 2*StaticMemory._hauteurChamp, StaticMemory._hauteurChamp), "blue:");
				Current.CurrentFunction.colorB.str = (GUI.TextField(new Rect(StaticMemory._Margin + 2*StaticMemory._hauteurChamp, currentY, largeur- 4*StaticMemory._hauteurChamp, StaticMemory._hauteurChamp), "" + Current.CurrentFunction.colorB.str));
				
				
				
				currentY += StaticMemory._hauteurChamp + StaticMemory._hauteurEntre;
				
				
				currentY += StaticMemory._hauteurChamp + StaticMemory._hauteurEntre;
				
				GUI.Label(new Rect(StaticMemory._Margin , currentY, 2*StaticMemory._hauteurChamp, StaticMemory._hauteurChamp), "Angle:");
				Current.CurrentFunction.LightAngle.str = (GUI.TextField(new Rect(StaticMemory._Margin + 2*StaticMemory._hauteurChamp, currentY, largeur- 4*StaticMemory._hauteurChamp, StaticMemory._hauteurChamp), "" + Current.CurrentFunction.LightAngle.str));
				
				
				currentY += StaticMemory._hauteurChamp;
				GUI.Label(new Rect(StaticMemory._Margin, currentY, 2*StaticMemory._hauteurChamp, StaticMemory._hauteurChamp), "Range:");
				Current.CurrentFunction.LightRange.str = (GUI.TextField(new Rect(StaticMemory._Margin + 2*StaticMemory._hauteurChamp, currentY, largeur- 4*StaticMemory._hauteurChamp, StaticMemory._hauteurChamp), "" + Current.CurrentFunction.LightRange.str));
				
				currentY += StaticMemory._hauteurChamp;
				GUI.Label(new Rect(StaticMemory._Margin, currentY, 2*StaticMemory._hauteurChamp, StaticMemory._hauteurChamp), "Intensity:");
				Current.CurrentFunction.LightIntensity.str = (GUI.TextField(new Rect(StaticMemory._Margin + 2*StaticMemory._hauteurChamp, currentY, largeur- 4*StaticMemory._hauteurChamp, StaticMemory._hauteurChamp), "" + Current.CurrentFunction.LightIntensity.str));
				
				
				
				currentY += StaticMemory._hauteurChamp + StaticMemory._hauteurEntre;
				
			}
			
			
			if(Current.ObjectComponent == "Text"){
				GUI.Box(new Rect(StaticMemory._Margin, currentY, largeur , StaticMemory._hauteurChamp), "Set Text");
				currentY += StaticMemory._hauteurChamp;
				Current.CurrentFunction.Text.str = GUI.TextField(new Rect(StaticMemory._Margin, currentY, largeur - 2*StaticMemory._hauteurChamp, StaticMemory._hauteurChamp), Current.CurrentFunction.Text.str);

				
				currentY += StaticMemory._hauteurChamp + StaticMemory._hauteurEntre;
			}
			
			//// META :
			GUI.Box(new Rect(StaticMemory._Margin, currentY, largeur , StaticMemory._hauteurChamp), "Meta informations");
			currentY += StaticMemory._hauteurChamp;
			GUI.Label(new Rect(StaticMemory._Margin , currentY, 2*StaticMemory._hauteurChamp, StaticMemory._hauteurChamp), "Hit:");
			Current.CurrentFunction.MetaHit.str = (GUI.TextField(new Rect(StaticMemory._Margin + 2*StaticMemory._hauteurChamp, currentY, largeur- 4*StaticMemory._hauteurChamp, StaticMemory._hauteurChamp), "" + Current.CurrentFunction.MetaHit.str));
			currentY += StaticMemory._hauteurChamp;
			if(Current.CurrentFunction.MetaHit.value){
				Current.CurrentFunction.MetaHitName = (GUI.TextField(new Rect(StaticMemory._Margin + 2*StaticMemory._hauteurChamp, currentY, largeur- 4*StaticMemory._hauteurChamp, StaticMemory._hauteurChamp), "" + Current.CurrentFunction.MetaHitName));
				currentY += StaticMemory._hauteurChamp +StaticMemory._hauteurEntre;
			}
			GUI.Label(new Rect(StaticMemory._Margin, currentY, 2*StaticMemory._hauteurChamp, StaticMemory._hauteurChamp), "Perform:");
			Current.CurrentFunction.MetaPerform.str = (GUI.TextField(new Rect(StaticMemory._Margin + 2*StaticMemory._hauteurChamp, currentY, largeur- 4*StaticMemory._hauteurChamp, StaticMemory._hauteurChamp), "" + Current.CurrentFunction.MetaPerform.str));
			currentY += StaticMemory._hauteurChamp;
			
			if(Current.CurrentFunction.MetaPerform.value){
				int count = Current.CurrentFunction.MetaPerformText.Split('\n').Length - 1 ;
				GUI.Label(new Rect(StaticMemory._Margin, currentY, 2*StaticMemory._hauteurChamp, StaticMemory._hauteurChamp), "Action:");
				Current.CurrentFunction.MetaPerformText = (GUI.TextArea(new Rect(StaticMemory._Margin + 2*StaticMemory._hauteurChamp, currentY, largeur- 4*StaticMemory._hauteurChamp, StaticMemory._hauteurChamp*(1+0.8f*count)), "" + Current.CurrentFunction.MetaPerformText));
				currentY += (int) (StaticMemory._hauteurChamp*(1+0.8f*count));
				
			}
			currentY += StaticMemory._hauteurEntre;
			return currentY;
		}

		int GUIHelp(int currentY, int largeur){
			string displayHelp = 
		"[h1]" + 	"Quick Help\n" +
					"\n" +
		"[h2]" + 	"Layout:\n" +
					"5 differents elements can be display on the editor interface. The colomn of the left can\n" +
					"also be splited in 4 boxes.\n" +
					"Clic on one of the five butom on the left [F,I,K,P or H] of the box to chose the wanted\n" +
					"element. You can also add (resp. remove) boxes by clic on the '+' (resp. '-') buttom.\n" +
					"\n" +
					"\n" +
		"[h2]" + 	"F -> Functions:\n" +
					"A function is a set of parameters for eatch element of the sensor. By default the 'Default'\n" +
					"function is called. they are two type of functions: classic and hover.\n" +
					"\t- Classic functions must have a condition.\n" +
					"\t- Hover function must have a fasle condition. this functions could be call by using meta\n" +
					"\t\tparameters one elements. Hover conditions are call by moved themouse on thoses\n" +
					"\t\telements.\n" +
					"\n" +
		"[h2]" + 	"I ->Item Selection:\n" +
					"The tree structure of the sensor is displayed. Click on one element to acces to specifique\n" +
					"parameters. New elements can be created by using the colomn on the right:\n" +
					"\t- First chose the name of the object\n" +
					"\t- Second duplicate current item [a new item will be created as borther of the current\n" +
					"\t\telement. Sans tree of obejct, sames settings].\n" +
					"\t- Or create new by type [chose one in the list] and chose one of the three buttoms at\n" +
					"\t\tthe bottom.\n" +
					"\n" +
		"[h2]" + 	"K -> Keys Editor\n" +
					"Key elements could be use to simulate device values, or to simplify writing formulas in\n" +
					"Parameters box.\n" +
					"Keys elements can be simple value of array values.\n" +
					"\n" +
		"[h2]" + 	"P -> Parameters\n" +
					"Elements are displayed if they are relevant.\n" +
					"See documentation for more details.\n" +
					"\n" +
		"[h2]" + 	"H -> Help\n" +
					"Display this help"

					;
			
			int FontSize = GUI.skin.label.fontSize;
			TextAnchor Alignment = GUI.skin.label.alignment;
			Color Color = GUI.color;


			foreach(string str in displayHelp.Split('\n')){
				string s = str;
				if(s.Contains("[h1]")){
					s = s.Replace("[h1]","");
					GUI.skin.label.alignment = TextAnchor.MiddleCenter;
					//GUI.skin.label.fontSize += 1;
				}

				if(s.Contains("[h2]")){
					s = s.Replace("[h2]","\t\t");
					GUI.color = Color.red;
				}

				GUI.Label(new Rect(StaticMemory._Margin, currentY, largeur , StaticMemory._hauteurChamp), s);
				currentY += (StaticMemory._hauteurChamp + StaticMemory._hauteurEntre)/2;

				GUI.skin.label.fontSize = FontSize;
				GUI.skin.label.alignment = Alignment;
				GUI.color = Color;

			}
			GUI.skin.label.alignment = TextAnchor.UpperLeft;
			currentY += (StaticMemory._hauteurChamp + StaticMemory._hauteurEntre)/2;
			return currentY;



		}


		int PrintList(SensorUnityItem item, int x, int y, int lx, int ly, bool _Display){
			// Print current
			GUI.enabled = _Display;
			bool b = GUI.Toggle(new Rect(StaticMemory._Margin +x,y,lx - ly - x,ly),display && (item == Current),"\t" + item.Name);
			if((item == Current) && display && (item != Root) && GUI.Button(new Rect(StaticMemory._Margin +lx - ly,y,ly ,ly),"x")){
				item.Parent.ListChild.Remove(item);
				item.GObject.SetActive(false);

			}
			if(_Display){
				if(!b && item == Current){
					display = false;
					
				}
				if(b && ((item != Current )|| !display)){
					Current = item;
					display = true;
				}
			}
			y += StaticMemory._hauteurChamp;

			// Print all Children
			foreach(SensorUnityItem s in item.ListChild){
				try{
					y = PrintList(s,x + 10,y,lx,ly, _Display && item.CurrentFunction.Active.value);
				}
				catch{};
			}
			if(item.ListChild.Count !=0){
				y += StaticMemory._hauteurEntre/2;
			}

			GUI.enabled = _Display;
			return y;

		}


		SensorUnityFunction AddFunctionRec(SensorUnityItem s, string n, bool b){
			SensorUnityFunction f = new SensorUnityFunction(NewFunction.Split('\n')[0],b);
			s.ListFunction.AddLast(f); 
			foreach (SensorUnityItem item in s.ListChild){
				AddFunctionRec(item, n, b);
			}

			return f;
		}



	}
}

