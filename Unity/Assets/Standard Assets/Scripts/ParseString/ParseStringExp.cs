//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using UnityEngine;


namespace AssemblyCSharpfirstpass
{
	public class ParseStringExp	{

		public LinkedList<ParseBoolExp> _childB = new LinkedList<ParseBoolExp> ();
		public LinkedList<ParseStringExp> _childS = new LinkedList<ParseStringExp> ();
		public LinkedList<ParseFloatExp> _childF = new LinkedList<ParseFloatExp> ();




		public string _op = "";
		public string _count = "";
		public string _value = "";

		public static string[] op = 
		{
			"If b s s",
			"HSV f f f",
			"RGB f f f"
		};

		static public ParseStringExp Make (string s){
			if(!s.Contains("\"")){
				s = "\"" + s + "\"";
			}
			ParseStringExp item = new ParseStringExp();

			while (s.StartsWith(" ")){
				s = ParseString.SplitFirst(s, ' ')[1];
			}
			
			string[] strv = ParseString.SplitFirst(s, ',');
			string[] strp = ParseString.SplitFirst(s, ')');
			
			if(strv[0].Length < strp[0].Length){
				item._count = "," + strv[1];
			}
			else{
				item._count = ")" + strp[1];
			}
			string argsAndCount;
			foreach(string opLine in op){
				if (s.StartsWith(opLine.Split(' ')[0])){
					switch(opLine.Split(' ')[0]){
						
						// Cas ou le 1er mot est un operateur.
					case "If":
						item._op = opLine.Split(' ')[0];
						argsAndCount = ParseString.SplitFirst(s, '(')[1];
						
						ParseBoolExp childB = ParseBoolExp.Make(argsAndCount);
						argsAndCount = childB._count;
						item._childB.AddLast(childB);
						
						
						
						while (argsAndCount.StartsWith(",")){
							argsAndCount = ParseString.SplitFirst(argsAndCount, ',')[1];
						}
						while (argsAndCount.StartsWith(" ")){
							argsAndCount = ParseString.SplitFirst(argsAndCount, ' ')[1];
						}
						
						while (!argsAndCount.StartsWith(")") ){
							ParseStringExp child = ParseStringExp.Make(argsAndCount);
							argsAndCount = child._count;
							item._childS.AddLast(child);
							
							
							
							while (argsAndCount.StartsWith(",")){
								argsAndCount = ParseString.SplitFirst(argsAndCount, ',')[1];
							}
							while (argsAndCount.StartsWith(" ")){
								argsAndCount = ParseString.SplitFirst(argsAndCount, ' ')[1];
							}
							
						}
						item._count = ParseString.SplitFirst(argsAndCount, ')')[1];
						
						break;
						
					}
					return item;
				}
			}
			
			// string : "The string".
			string[] str = ParseString.SplitFirst(ParseString.SplitFirst(s, '\"')[1], '\"');
			item._count = str[1];
			item._value = str[0];
			
			return item;
			
		}

		public string Evaluate(LinkedList<SensorUpdator.KeyValue> LinkKeyValues){
			switch(_op){
			case "If":
				if (_childB.First.Value.Evaluate(LinkKeyValues)){
					return _childS.First.Value.Evaluate(LinkKeyValues);
				}
				else{
					return _childS.Last.Value.Evaluate(LinkKeyValues);
				}


			default:
				// Literal TODO
				if (_value != "Text"){
				}
				return PString.RemplaceSpecialChar(_value,LinkKeyValues);
			}
		}

		public string toString(string tab){
			string res =  tab + _op;
			
			if(_op != ""){
				
				res += "(\n";
				int i;
				
				i = _childB.Count;
				bool diff1 = false;
				bool diff2 = false;
				foreach( ParseBoolExp b in _childB){
					
					res += b.toString(tab + "\t");
					i--;
					if( i > 0)
						res += ",\n ";
					diff1 = true;
				}
				
				i = _childS.Count;
				foreach( ParseStringExp b in _childS){
					if(diff1){
						res+=",\n";
						diff1 = false;
					}
					res += b.toString(tab + "\t");
					i--;
					if( i > 0)
						res += ",\n ";
					diff2 = true;
				}
				
				i = _childF.Count;
				foreach( ParseFloatExp b in _childF){
					if(diff1 || diff2){
						res+=",\n";
						diff1 = false;
						diff2 = false;
					}
					
					res += b.toString(tab + "\t");
					i--;
					if( i > 0)
						res += ",\n ";
				}
				
				
				res += ")";
			}
			else{
				res += _value;
			}
			return res;
		}

	}
}

